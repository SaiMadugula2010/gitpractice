import boto3
import os
import tempfile
import base64
import pgpy  # PGP library

# AWS Clients
s3 = boto3.client("s3")
secrets_manager = boto3.client("secretsmanager")


def get_secret(secret_name):
    """Retrieve a secret (PGP private key) from AWS Secrets Manager."""
    response = secrets_manager.get_secret_value(SecretId=secret_name)

    if "SecretString" in response:
        secret_value = response["SecretString"]

        # Check if it's base64 encoded
        if "-----BEGIN PGP PRIVATE KEY BLOCK-----" not in secret_value:
            try:
                secret_value = base64.b64decode(secret_value).decode("utf-8")
                print("Decoded Base64 secret.")
            except Exception as e:
                print(f"Failed to decode Base64 secret: {e}")

        # Validate private key format
        if "-----BEGIN PGP PRIVATE KEY BLOCK-----" not in secret_value:
            raise ValueError("Invalid PGP private key format.")

        return secret_value
    else:
        raise ValueError("SecretString not found in Secrets Manager response.")


def list_s3_files(bucket_name, prefix):
    """List all .pgp files in an S3 bucket folder."""
    response = s3.list_objects_v2(Bucket=bucket_name, Prefix=prefix)
    return [obj["Key"] for obj in response.get("Contents", []) if obj["Key"].endswith(".pgp")]


def download_s3_file(bucket_name, s3_key, local_path):
    """Download a file from S3 to local storage."""
    print(f"Downloading {s3_key} from {bucket_name}")
    s3.download_file(bucket_name, s3_key, local_path)


def upload_s3_file(local_path, bucket_name, s3_key):
    """Upload a decrypted file to S3."""
    if os.path.exists(local_path) and os.stat(local_path).st_size > 0:
        print(f"Uploading {local_path} to s3://{bucket_name}/{s3_key}")
        s3.upload_file(local_path, bucket_name, s3_key)
    else:
        print(f"Skipping upload: {local_path} is empty or missing.")


def decrypt_pgp_file(encrypted_file_path, decrypted_file_path, private_key_data, passphrase):
    """Decrypts a PGP file using `pgpy`."""
    try:
        # Load PGP private key
        private_key, _ = pgpy.PGPKey.from_blob(private_key_data)
        print("PGP private key loaded successfully.")

        # Unlock the key
        with private_key.unlock(passphrase) as unlocked_key:
            print("PGP key unlocked successfully.")

            # Read encrypted file
            with open(encrypted_file_path, "rb") as f:
                encrypted_data = f.read()

            encrypted_message = pgpy.PGPMessage.from_blob(encrypted_data)

            # Decrypt the message
            decrypted_message = unlocked_key.decrypt(encrypted_message).message

            # Save decrypted content
            with open(decrypted_file_path, "w") as f:
                f.write(decrypted_message)

            print(f"Decryption successful: {decrypted_file_path}")
            return True
    except Exception as e:
        print(f"Decryption failed: {e}")
        return False


def main():
    # S3 configuration
    s3_bucket = "pseg-dlsmartopsdev-cda-raw"
    encrypted_folder = "radius/"
    decrypted_folder = "decrypted-radius/"

    # AWS Secrets Manager Secret Name
    secret_name = "testsai03"

    # Retrieve PGP private key and passphrase
    pgp_private_key = get_secret(secret_name)
    passphrase = "cdaradius0305"  # Ensure this is securely managed

    # List all PGP files in S3
    pgp_files = list_s3_files(s3_bucket, encrypted_folder)
    print(f"Found {len(pgp_files)} encrypted files in S3: {pgp_files}")

    if not pgp_files:
        print("No PGP files found. Exiting.")
        return

    # Process each encrypted file
    for s3_encrypted_key in pgp_files:
        file_name = os.path.basename(s3_encrypted_key)
        decrypted_file_name = file_name.replace(".pgp", "")  # Remove .pgp extension
        s3_decrypted_key = f"{decrypted_folder}{decrypted_file_name}"

        # Temp file paths
        temp_dir = tempfile.gettempdir()
        encrypted_local_path = os.path.join(temp_dir, file_name)
        decrypted_local_path = os.path.join(temp_dir, decrypted_file_name)

        # Download encrypted file from S3
        download_s3_file(s3_bucket, s3_encrypted_key, encrypted_local_path)

        # Decrypt the file
        success = decrypt_pgp_file(encrypted_local_path, decrypted_local_path, pgp_private_key, passphrase)

        if success:
            # Upload decrypted file to S3
            upload_s3_file(decrypted_local_path, s3_bucket, s3_decrypted_key)
            print(f"Decrypted file uploaded to: s3://{s3_bucket}/{s3_decrypted_key}")


if __name__ == "__main__":
    main()
