##############################################################################################
### Author: Byju Sudhakaran
### Date Started: 4/18/2022
### Last Update Date: 06/22/2023
### Lambda Function Name: mfdc_sdros_file_arrive
###    Language: Python 3.9
##############################################################################################
import json
import re
import uuid
import boto3
import datetime
from datetime import datetime
import os
import logging
import io
import zipfile

#######################################################################
### Global Variables: Set the logger
#######################################################################
logger = logging.getLogger('mfdc_sdros_loader')
formatter = logging.Formatter('[%(levelname)s] %(message)s')
stream_handler = logging.StreamHandler()
stream_handler.setFormatter(formatter)
logger.addHandler(stream_handler)
logger.propagate = False
log_level_default = os.environ.get("LOG_LEVEL","DEBUG")
function_name = ""

s3_client = boto3.client('s3')

##############################################################################################
### S3 Event triggers this Lambda Function when a file is dropped in the Raw S3
### bucket.
##############################################################################################
def lambda_handler(event, context): 
    try:
        logger.setLevel(log_level_default) #set initial log level, will be overridden
        logger.debug(f"Event received : {event}") #log the arrival event

        ##################################################################
        ### Get the name of the Lambda Function from the context object.
        ### It will be used if this lambda function throws an exception.
        ##################################################################
        function_name = context.function_name

        ##################################################################
        ### Get the environment variables.
        ##################################################################
        config_table = verify_and_get_dict_value(function_name, os.environ, 'config_table_name', True);
        app_name = verify_and_get_dict_value(function_name, os.environ, 'app_name', True);

        # Get config entries from DynamoDB database.
        config_values = setup_config_values_from_dynamoDB(config_table, app_name);

        config_values['file_bucket'] = event['Records'][0]['s3']['bucket']['name'];
        config_values['file_key'] = event['Records'][0]['s3']['object']['key'];

        # Extract file_name from the key and save it to config_values
        key_parts = config_values['file_key'].split('/')
        config_values['file_name'] = key_parts[-1]
        config_values['processing_file'] = f"s3://{config_values['bucket_info']['staging_bucket']}/{config_values['bucket_info']['staging_key_prefix']}{config_values['file_name'].upper().replace('.ZIP', '.GZ')}"

        logger.debug(f"Processing file {config_values['file_name']} config_table {str(config_table)} app_name {str(app_name)}")
        logger.debug('The config_values is' + str(config_values))
        logger.setLevel(config_values['log'].get("log_level").upper())

        # Extract SDRID, asset class, and date from file name
        regExCompiled = re.compile(config_values['file_name_regex'])
        matchGroups = regExCompiled.search(config_values['file_name'])
        if matchGroups is not None:
            config_values["file_dt"] = matchGroups.group('file_dt')
            config_values['sdr_id'] = matchGroups.group('sdr_id').upper()
            config_values['asset_class'] = matchGroups.group('asset_class').upper()
            config_values['file_group'] = "SDROS_" + config_values['asset_class'].upper()
        else:
            raise Exception(f"Cannot find sdr_id, file_dt and asset_class from file name: {config_values['file_name']}, Regex: {config_values['file_name_regex']}")

        # Initialize config values for file audit
        setup_config_values_for_FileAudit(config_values)

        # Build step function input
        sf_input = build_sf_input(config_values)
        logger.debug(f"Step function input completed {sf_input}. Before calling state machine.")

        # Call state machine    
        sm_response = call_state_machine(config_values, sf_input, config_values['file_name']);
            
    except ValueError as err:
        logger.error(f'ValueError happened in {function_name} Lambda Function. Message: {err}')
        raise err
        
    except Exception as ex:
        message = f"An exception of type {type(ex).__name__} occurred in {function_name}. Arguments: {ex.args}"
        logger.error(message)
        raise ex 

########################################################################################################################
### Function: Get Config values from DynamoDB table
########################################################################################################################
def setup_config_values_from_dynamoDB(config_table, app_name):
    logger.debug(f"Reading from DynamoDB: config_table - {config_table} app_name - {app_name}")

    dynamoDB = boto3.resource('dynamodb', region_name='us-east-1')
    config_table = dynamoDB.Table(config_table)
    response_payload = config_table.get_item(Key={'application_name': app_name})
    logger.debug(f"Response from Dynamo: {response_payload}")
    config_values = response_payload['Item']
    config_values['app_name'] = app_name
    
    return config_values

########################################################################################################################
### Function: Builds the step function input JSON.
########################################################################################################################
def build_sf_input(config_values):
    logger.debug(f"Config values - {config_values}")
    source_file = f"{config_values['file_bucket']}/{config_values['file_key']}"
    
    sf_values = {}

    sf_values["SourceBucket"] = config_values['file_bucket']
    sf_values["SourceKey"] = config_values['file_key']
    sf_values["SourceBucketWithKey"] = source_file 
    sf_values["StagingBucket"] = config_values["bucket_info"]["staging_bucket"]
    sf_values["StagingKey"] = f"{config_values['bucket_info']['staging_key_prefix']}{config_values['file_name'].upper().replace('.zip', '.gz')}"

    # Updated ArchiveKey to include 'harmonized/os/<sdr_id>/'
    sf_values["ArchiveBucket"] = config_values["bucket_info"]["archive_bucket"]
    sf_values["ArchiveKey"] = f"{config_values['bucket_info']['archive_key_prefix']}harmonized/os/{config_values['sdr_id'].upper()}/{config_values['file_name']}"

    sf_values["LogLevel"] = config_values['log'].get("log_level").upper()
    sf_values["FileName"] = config_values['file_name']
    sf_values["HeaderBuffer"] = config_values['header_buffer']
    
    sf_values["LambdaFunctions"] = {
        "BuildSnsMsg": config_values["lambda_functions"]["build_sns_msg"],
        "ExecuteRsCommand": config_values["lambda_functions"]["execute_rs_command"],
        "SendTaskResult": config_values["lambda_functions"]["send_task_result"],
        "ConvertToJson": config_values["lambda_functions"]["convert_to_json"],
        "LogAudit": config_values["lambda_functions"]["file_audit"],
        "RecCheckLambda": config_values["lambda_functions"]["rec_check_lambda"],
        "CreateRedshiftQueries": config_values["lambda_functions"]["create_redshift_queries"]
    }
    
    sf_values["SuccessBody"] = config_values["notifications"]["success"]["body"]
    sf_values["SuccessSubject"] = config_values["notifications"]["success"]["subject"]
    sf_values["FailureBody"] = config_values["notifications"]["failure"]["body"]
    sf_values["FailureSubject"] = config_values["notifications"]["failure"]["subject"]
    sf_values["NotificationArn"] = config_values["notifications"]["notification_arn"]
    
    sf_values['LogParams'] = config_values["LogParams"]
    sf_values["FileDt"] = config_values["file_dt"]
    sf_values["SdrId"] = config_values['sdr_id']
    sf_values["AssetClass"] = config_values['asset_class']
    sf_values["FileGroup"] = config_values['file_group']

    logger.debug(f"Step Function Input: {sf_values}")
    
    return sf_values

########################################################################################################################
### Function: Call the State Machine 
########################################################################################################################
def call_state_machine(config_values, sm_input, file_name): 
    loader_arn = config_values["step_functions"]["loader_arn"]
    
    stepFun_client = boto3.client("stepfunctions")
    response = stepFun_client.start_execution(stateMachineArn=loader_arn, input=json.dumps(sm_input))

    logger.debug(f"State Machine Response: {response}")
    return response
