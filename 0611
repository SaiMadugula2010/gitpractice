import boto3
import os
from dotenv import load_dotenv

# Load credentials from .env file
load_dotenv()

AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_REGION = os.getenv("AWS_DEFAULT_REGION", "us-east-1")

def find_security_groups_with_ip(target_ip):
    ec2 = boto3.client(
        "ec2",
        region_name=AWS_REGION,
        aws_access_key_id=AWS_ACCESS_KEY_ID,
        aws_secret_access_key=AWS_SECRET_ACCESS_KEY
    )

    response = ec2.describe_security_groups()
    matching_sgs = []

    for sg in response["SecurityGroups"]:
        group_id = sg["GroupId"]
        group_name = sg["GroupName"]
        for permission in sg.get("IpPermissions", []):
            for ip_range in permission.get("IpRanges", []):
                if ip_range.get("CidrIp") == target_ip:
                    matching_sgs.append({
                        "GroupId": group_id,
                        "GroupName": group_name,
                        "Protocol": permission.get("IpProtocol"),
                        "PortRange": f"{permission.get('FromPort')} - {permission.get('ToPort')}",
                        "CidrIp": ip_range.get("CidrIp"),
                        "Description": ip_range.get("Description", "")
                    })
    return matching_sgs

if __name__ == "__main__":
    ip_input = input("Enter the IP address (CIDR format, e.g. 203.0.113.0/32): ").strip()

    results = find_security_groups_with_ip(ip_input)

    if results:
        for sg in results:
            print(f"\nSecurity Group ID: {sg['GroupId']}")
            print(f"Name: {sg['GroupName']}")
            print(f"Protocol: {sg['Protocol']}")
            print(f"Port Range: {sg['PortRange']}")
            print(f"Cidr IP: {sg['CidrIp']}")
            print(f"Description: {sg['Description']}")
    else:
        print("No matching security groups found.")











import os
import requests
from dotenv import load_dotenv
from tabulate import tabulate

# Load CloudHealth API key from .env
load_dotenv()
API_KEY = os.getenv("CH_API_KEY")

BASE_URL = "https://chapi.cloudhealthtech.com/v1"
HEADERS = {
    "Content-Type": "application/json",
    "Authorization": f"Bearer {API_KEY}"
}

def get_ec2_instance_details(input_value):
    url = f"{BASE_URL}/assets/aws_instances"
    params = {"show_all": "true"}

    response = requests.get(url, headers=HEADERS, params=params)
    if response.status_code != 200:
        print(f"❌ Error fetching EC2 instances: {response.status_code}")
        print(response.text)
        return

    ec2_list = response.json().get("aws_instances", [])
    matched = []

    for inst in ec2_list:
        instance_id = inst.get("instance_id", "")
        name_tag = inst.get("name", "")

        if input_value.lower() in instance_id.lower() or input_value.lower() in name_tag.lower():
            matched.append(inst)

    if not matched:
        print(f"❌ No matching EC2 instances found for: {input_value}")
        return

    for inst in matched:
        print(f"\n✅ EC2 Instance: {inst.get('instance_id')} ({inst.get('name')})")
        table = [[k, str(v)] for k, v in inst.items()]
        print(tabulate(table, headers=["Field", "Value"], tablefmt="grid"))

if __name__ == "__main__":
    user_inputs = input("Enter EC2 instance IDs or Name tags (comma-separated): ").strip()
    inputs = [val.strip() for val in user_inputs.split(",")]
    for val in inputs:
        get_ec2_instance_details(val)
