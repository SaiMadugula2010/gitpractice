import boto3
import os
from dotenv import load_dotenv

# Load credentials from .env file
load_dotenv()

AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_REGION = os.getenv("AWS_DEFAULT_REGION", "us-east-1")

def find_security_groups_with_ip(target_ip):
    ec2 = boto3.client(
        "ec2",
        region_name=AWS_REGION,
        aws_access_key_id=AWS_ACCESS_KEY_ID,
        aws_secret_access_key=AWS_SECRET_ACCESS_KEY
    )

    response = ec2.describe_security_groups()
    matching_sgs = []

    for sg in response["SecurityGroups"]:
        group_id = sg["GroupId"]
        group_name = sg["GroupName"]
        for permission in sg.get("IpPermissions", []):
            for ip_range in permission.get("IpRanges", []):
                if ip_range.get("CidrIp") == target_ip:
                    matching_sgs.append({
                        "GroupId": group_id,
                        "GroupName": group_name,
                        "Protocol": permission.get("IpProtocol"),
                        "PortRange": f"{permission.get('FromPort')} - {permission.get('ToPort')}",
                        "CidrIp": ip_range.get("CidrIp"),
                        "Description": ip_range.get("Description", "")
                    })
    return matching_sgs

if __name__ == "__main__":
    ip_input = input("Enter the IP address (CIDR format, e.g. 203.0.113.0/32): ").strip()

    results = find_security_groups_with_ip(ip_input)

    if results:
        for sg in results:
            print(f"\nSecurity Group ID: {sg['GroupId']}")
            print(f"Name: {sg['GroupName']}")
            print(f"Protocol: {sg['Protocol']}")
            print(f"Port Range: {sg['PortRange']}")
            print(f"Cidr IP: {sg['CidrIp']}")
            print(f"Description: {sg['Description']}")
    else:
        print("No matching security groups found.")















import boto3
import os
from dotenv import load_dotenv
from tabulate import tabulate

# Load .env AWS credentials
load_dotenv()

AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
AWS_REGION = os.getenv("AWS_DEFAULT_REGION", "us-east-1")

# Get Account ID once
def get_account_id():
    sts = boto3.client(
        "sts",
        region_name=AWS_REGION,
        aws_access_key_id=AWS_ACCESS_KEY_ID,
        aws_secret_access_key=AWS_SECRET_ACCESS_KEY
    )
    return sts.get_caller_identity()["Account"]

account_id = get_account_id()

def get_ec2_details(search_term):
    ec2 = boto3.client(
        "ec2",
        region_name=AWS_REGION,
        aws_access_key_id=AWS_ACCESS_KEY_ID,
        aws_secret_access_key=AWS_SECRET_ACCESS_KEY
    )

    try:
        # Try as instance ID
        response = ec2.describe_instances(Filters=[
            {"Name": "instance-id", "Values": [search_term]}
        ])
        if not response["Reservations"]:
            # Try as Name tag
            response = ec2.describe_instances(Filters=[
                {"Name": "tag:Name", "Values": [search_term]}
            ])
    except Exception as e:
        print(f"❌ Error: {e}")
        return

    if not response["Reservations"]:
        print(f"❌ No EC2 instance found for: {search_term}")
        return

    for res in response["Reservations"]:
        for instance in res["Instances"]:
            instance_id = instance.get("InstanceId")
            name_tag = next((tag["Value"] for tag in instance.get("Tags", []) if tag["Key"] == "Name"), "")
            arn = f"arn:aws:ec2:{AWS_REGION}:{account_id}:instance/{instance_id}"

            print(f"\n✅ Instance: {instance_id} ({name_tag})")
            table = [
                ["ARN", arn],
                ["InstanceId", instance_id],
                ["Name", name_tag]
            ]
            # Add a few more useful fields
            keys_to_show = ["InstanceType", "State", "PrivateIpAddress", "PublicIpAddress", "AvailabilityZone"]
            for key in keys_to_show:
                val = instance.get(key) or instance.get("Placement", {}).get(key)
                if val is not None:
                    table.append([key, str(val)])

            print(tabulate(table, headers=["Field", "Value"], tablefmt="grid"))

if __name__ == "__main__":
    user_input = input("Enter EC2 instance IDs or Name tags (comma-separated): ").strip()
    terms = [i.strip() for i in user_input.split(",")]
    for term in terms:
        get_ec2_details(term)
