import boto3
import os
import subprocess
import gnupg
import tempfile
import traceback

# AWS Clients
s3 = boto3.client("s3")
secrets_manager = boto3.client("secretsmanager")

def get_secret(secret_name):
    """Retrieve a secret from AWS Secrets Manager."""
    response = secrets_manager.get_secret_value(SecretId=secret_name)
    if "SecretString" in response:
        return response["SecretString"]
    else:
        raise ValueError("SecretString not found in Secrets Manager response.")

def list_s3_files(bucket_name, prefix):
    """List all .pgp files in an S3 folder."""
    response = s3.list_objects_v2(Bucket=bucket_name, Prefix=prefix)
    return [obj["Key"] for obj in response.get("Contents", []) if obj["Key"].endswith(".pgp")] if "Contents" in response else []

def download_s3_file(bucket_name, s3_key, local_path):
    """Download a file from S3 to a local path."""
    print(f"‚¨áÔ∏è Downloading {s3_key} from {bucket_name}")
    s3.download_file(bucket_name, s3_key, local_path)

def upload_s3_file(local_path, bucket_name, s3_key):
    """Upload a decrypted file back to S3."""
    if os.path.exists(local_path) and os.stat(local_path).st_size > 0:
        print(f"‚¨ÜÔ∏è Uploading {local_path} to s3://{bucket_name}/{s3_key}")
        s3.upload_file(local_path, bucket_name, s3_key)
    else:
        print(f"‚ö†Ô∏è Skipping upload: {local_path} is empty or missing.")

def decrypt_pgp_file(encrypted_file_path, decrypted_file_path, private_key_data, passphrase):
    """Decrypts a PGP file using GnuPG."""
    try:
        # Ensure GPG binary path is correct
        gpg = gnupg.GPG(gpgbinary="/opt/bin/gpg")

        # Import the private key
        import_result = gpg.import_keys(private_key_data)
        if not import_result.fingerprints:
            raise ValueError("‚ùå ERROR: Failed to import PGP private key.")

        print(f"üîë Imported PGP key: {import_result.fingerprints}")

        # Decrypt the file
        with open(encrypted_file_path, "rb") as f:
            decrypted_data = gpg.decrypt_file(f, passphrase=passphrase, output=decrypted_file_path)

        if decrypted_data.ok:
            print(f"‚úÖ Decryption successful: {decrypted_file_path}")
            return True
        else:
            print(f"‚ùå Decryption failed: {decrypted_data.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå Error during decryption: {str(e)}")
        traceback.print_exc()
        return False

def lambda_handler(event, context):
    """AWS Lambda function handler."""
    print("üöÄ Starting PGP decryption process...")

    # Verify if GPG is available
    try:
        result = subprocess.run(["/opt/bin/gpg", "--version"], capture_output=True, text=True)
        print(f"GPG Version:\n{result.stdout}")
    except Exception as e:
        print(f"‚ùå ERROR: GPG is not available in Lambda: {str(e)}")
        return {"statusCode": 500, "body": "GPG not found in Lambda environment."}

    # S3 Configuration
    s3_bucket = "pseg-dlsmartopsdev-cda-raw"
    encrypted_folder = "radius/"
    decrypted_folder = "decrypted-radius/"
    secret_name = 'dev/cda/radius0305'

    # Retrieve PGP private key
    pgp_private_key = get_secret(secret_name)
    passphrase = "cdaradius0305"

    # List all encrypted PGP files
    pgp_files = list_s3_files(s3_bucket, encrypted_folder)

    print(f"üìÇ Found {len(pgp_files)} encrypted files: {pgp_files}")

    if not pgp_files:
        print("‚ö†Ô∏è No PGP files found.")
        return {"statusCode": 200, "body": "No PGP files found in S3."}

    # Process each encrypted file
    for s3_encrypted_key in pgp_files:
        file_name = os.path.basename(s3_encrypted_key)
        decrypted_file_name = file_name.replace(".pgp", "")
        s3_decrypted_key = f"{decrypted_folder}{decrypted_file_name}"

        # Use Lambda /tmp directory for temporary files
        temp_dir = "/tmp"
        encrypted_local_path = os.path.join(temp_dir, file_name)
        decrypted_local_path = os.path.join(temp_dir, decrypted_file_name)

        try:
            # Download encrypted file from S3
            download_s3_file(s3_bucket, s3_encrypted_key, encrypted_local_path)

            # Decrypt the file
            success = decrypt_pgp_file(encrypted_local_path, decrypted_local_path, pgp_private_key, passphrase)

            if success:
                # Upload decrypted file to S3
                upload_s3_file(decrypted_local_path, s3_bucket, s3_decrypted_key)
                print(f"‚úÖ Decrypted file uploaded: s3://{s3_bucket}/{s3_decrypted_key}")
            else:
                print(f"‚ùå Decryption failed for {file_name}")

        except Exception as e:
            print(f"‚ùå ERROR processing {file_name}: {str(e)}")
            traceback.print_exc()

    return {"statusCode": 200, "body": "PGP decryption process completed successfully."}
