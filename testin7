import boto3
import os
import tempfile
import traceback
import pgpy  # Import the PGP library

# AWS Clients
s3 = boto3.client("s3")
secrets_manager = boto3.client("secretsmanager")

def get_secret(secret_name):
    """Retrieve a secret from AWS Secrets Manager."""
    response = secrets_manager.get_secret_value(SecretId=secret_name)
    if "SecretString" in response:
        return response["SecretString"]
    else:
        raise ValueError("SecretString not found in Secrets Manager response")

def list_s3_files(bucket_name, prefix):
    """List all PGP files in the specified S3 folder."""
    response = s3.list_objects_v2(Bucket=bucket_name, Prefix=prefix)
    if "Contents" in response:
        return [obj["Key"] for obj in response["Contents"] if obj["Key"].endswith(".pgp")]
    return []

def download_s3_file(bucket_name, s3_key, local_path):
    """Download a file from S3 to a local path."""
    print(f"Downloading {s3_key} from S3 bucket {bucket_name}")
    s3.download_file(bucket_name, s3_key, local_path)

def upload_s3_file(local_path, bucket_name, s3_key):
    """Upload a file from local storage to S3."""
    if os.path.exists(local_path) and os.stat(local_path).st_size > 0:
        print(f"Uploading decrypted file {local_path} to s3://{bucket_name}/{s3_key}")
        s3.upload_file(local_path, bucket_name, s3_key)
    else:
        print(f"File {local_path} is missing or empty. Skipping upload.")

def decrypt_pgp_file(encrypted_file_path, decrypted_file_path, private_key_data, passphrase):
    """Decrypts a PGP file using `pgpy`."""
    try:
        # Load private key
        private_key, _ = pgpy.PGPKey.from_blob(private_key_data)

        # Unlock the key with the passphrase
        with private_key.unlock(passphrase) as unlocked_key:
            # Read the encrypted message
            with open(encrypted_file_path, "rb") as f:
                encrypted_data = f.read()

            # Debugging: Print the first 100 bytes of the encrypted data
            print(f"First 100 bytes of encrypted data: {encrypted_data[:100]}")

            # Try to load the message as binary first
            try:
                encrypted_message = pgpy.PGPMessage.from_blob(encrypted_data)
                print("Loaded PGP message as binary.")
            except pgpy.errors.PGPError:
                # If binary fails, try loading as armored (ASCII) format
                try:
                    encrypted_message = pgpy.PGPMessage.from_file(encrypted_file_path)
                    print("Loaded PGP message as armored (ASCII).")
                except Exception as e:
                    raise ValueError(f"Failed to load PGP message: {e}")

            # Decrypt the message
            decrypted_message = unlocked_key.decrypt(encrypted_message).message

            # Save decrypted content
            with open(decrypted_file_path, "w") as f:
                f.write(decrypted_message)

            print(f"Decryption successful: {decrypted_file_path}")
            return True
    except Exception as e:
        print(f"Decryption failed: {str(e)}")
        traceback.print_exc()  # Print detailed traceback for debugging
        return False

def main():
    # S3 bucket name
    s3_bucket = "pseg-dlsmartopsdev-cda-raw"

    # Folder containing encrypted files in S3
    encrypted_folder = "radius/"

    # Folder where decrypted files will be stored
    decrypted_folder = "decrypted-radius/"

    # Define secret_name before using it
    secret_name = 'dev/cda/radius0305'

    # Retrieve PGP private key and passphrase from AWS Secrets Manager
    pgp_private_key = get_secret(secret_name)
    passphrase = 'cdaradius0305'
    print(f"Retrieved PGP private key from Secrets Manager: {pgp_private_key}")

    # List all .pgp files in the folder
    pgp_files = list_s3_files(s3_bucket, encrypted_folder)

    print(f"Found {len(pgp_files)} encrypted files in S3: {pgp_files}")

    if not pgp_files:
        print("No PGP files found in the folder.")
        return

    # Process each encrypted file
    for s3_encrypted_key in pgp_files:
        file_name = os.path.basename(s3_encrypted_key)  # Get original filename
        decrypted_file_name = file_name.replace(".pgp", "")  # Remove .pgp extension
        s3_decrypted_key = f"{decrypted_folder}{decrypted_file_name}"

        # Temp file paths
        temp_dir = tempfile.gettempdir()
        encrypted_local_path = os.path.join(temp_dir, file_name)
        decrypted_local_path = os.path.join(temp_dir, decrypted_file_name)

        # Download encrypted file from S3
        download_s3_file(s3_bucket, s3_encrypted_key, encrypted_local_path)

        # Decrypt the file
        success = decrypt_pgp_file(encrypted_local_path, decrypted_local_path, pgp_private_key, passphrase)

        if success:
            # Upload decrypted file back to S3
            upload_s3_file(decrypted_local_path, s3_bucket, s3_decrypted_key)
            print(f"Decrypted file uploaded to: s3://{s3_bucket}/{s3_decrypted_key}")

if __name__ == "__main__":
    main()








Traceback (most recent call last):
  File "/tmp/cda-test-job-sai.py", line 58, in decrypt_pgp_file
    encrypted_message = pgpy.PGPMessage.from_blob(encrypted_data)
  File "/home/spark/.local/lib/python3.10/site-packages/pgpy/types.py", line 198, in from_blob
    po = obj.parse(bytearray(blob))
  File "/home/spark/.local/lib/python3.10/site-packages/pgpy/pgp.py", line 1293, in parse
    self |= Packet(data)
  File "/home/spark/.local/lib/python3.10/site-packages/pgpy/pgp.py", line 1080, in __or__
    raise NotImplementedError(str(type(other)))




NotImplementedError: <class 'pgpy.packet.types.Opaque'>











import boto3
import os
import tempfile
import traceback
import gnupg  # Import the python-gnupg library

# AWS Clients
s3 = boto3.client("s3")
secrets_manager = boto3.client("secretsmanager")

def get_secret(secret_name):
    """Retrieve a secret from AWS Secrets Manager."""
    response = secrets_manager.get_secret_value(SecretId=secret_name)
    if "SecretString" in response:
        return response["SecretString"]
    else:
        raise ValueError("SecretString not found in Secrets Manager response")

def list_s3_files(bucket_name, prefix):
    """List all PGP files in the specified S3 folder."""
    response = s3.list_objects_v2(Bucket=bucket_name, Prefix=prefix)
    if "Contents" in response:
        return [obj["Key"] for obj in response["Contents"] if obj["Key"].endswith(".pgp")]
    return []

def download_s3_file(bucket_name, s3_key, local_path):
    """Download a file from S3 to a local path."""
    print(f"Downloading {s3_key} from S3 bucket {bucket_name}")
    s3.download_file(bucket_name, s3_key, local_path)

def upload_s3_file(local_path, bucket_name, s3_key):
    """Upload a file from local storage to S3."""
    if os.path.exists(local_path) and os.stat(local_path).st_size > 0:
        print(f"Uploading decrypted file {local_path} to s3://{bucket_name}/{s3_key}")
        s3.upload_file(local_path, bucket_name, s3_key)
    else:
        print(f"File {local_path} is missing or empty. Skipping upload.")

def decrypt_pgp_file(encrypted_file_path, decrypted_file_path, private_key_data, passphrase):
    """Decrypts a PGP file using `python-gnupg`."""
    try:
        # Initialize GPG
        gpg = gnupg.GPG()

        # Import the private key
        import_result = gpg.import_keys(private_key_data)
        if not import_result.fingerprints:
            raise ValueError("Failed to import private key")

        # Decrypt the file
        with open(encrypted_file_path, "rb") as f:
            decrypted_data = gpg.decrypt_file(f, passphrase=passphrase, output=decrypted_file_path)

        if decrypted_data.ok:
            print(f"Decryption successful: {decrypted_file_path}")
            return True
        else:
            print(f"Decryption failed: {decrypted_data.stderr}")
            return False
    except Exception as e:
        print(f"Decryption failed: {str(e)}")
        traceback.print_exc()  # Print detailed traceback for debugging
        return False

def main():
    # S3 bucket name
    s3_bucket = "pseg-dlsmartopsdev-cda-raw"

    # Folder containing encrypted files in S3
    encrypted_folder = "radius/"

    # Folder where decrypted files will be stored
    decrypted_folder = "decrypted-radius/"

    # Define secret_name before using it
    secret_name = 'dev/cda/radius0305'

    # Retrieve PGP private key and passphrase from AWS Secrets Manager
    pgp_private_key = get_secret(secret_name)
    passphrase = 'cdaradius0305'
    print(f"Retrieved PGP private key from Secrets Manager: {pgp_private_key}")

    # List all .pgp files in the folder
    pgp_files = list_s3_files(s3_bucket, encrypted_folder)

    print(f"Found {len(pgp_files)} encrypted files in S3: {pgp_files}")

    if not pgp_files:
        print("No PGP files found in the folder.")
        return

    # Process each encrypted file
    for s3_encrypted_key in pgp_files:
        file_name = os.path.basename(s3_encrypted_key)  # Get original filename
        decrypted_file_name = file_name.replace(".pgp", "")  # Remove .pgp extension
        s3_decrypted_key = f"{decrypted_folder}{decrypted_file_name}"

        # Temp file paths
        temp_dir = tempfile.gettempdir()
        encrypted_local_path = os.path.join(temp_dir, file_name)
        decrypted_local_path = os.path.join(temp_dir, decrypted_file_name)

        # Download encrypted file from S3
        download_s3_file(s3_bucket, s3_encrypted_key, encrypted_local_path)

        # Decrypt the file
        success = decrypt_pgp_file(encrypted_local_path, decrypted_local_path, pgp_private_key, passphrase)

        if success:
            # Upload decrypted file back to S3
            upload_s3_file(decrypted_local_path, s3_bucket, s3_decrypted_key)
            print(f"Decrypted file uploaded to: s3://{s3_bucket}/{s3_decrypted_key}")

if __name__ == "__main__":
    main()
