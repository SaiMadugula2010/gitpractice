        private bool Load(SDRLoaderInfo sdrLoaderInfo)
        {
            Log.Writer.Write("Before starting the Stage load", TraceEventType.Verbose, LoaderConstant.LogSource, LoaderConstant.SDRLoaderException);
            if (!LoadInitialStage(sdrLoaderInfo))
            {
                return false;
            }
            Log.Writer.Write("Before starting the DM load", TraceEventType.Information, LoaderConstant.LogSource, LoaderConstant.SDRLoaderException);
            if (!LoadDataMart(sdrLoaderInfo))
            {
                return false;
            }
            Log.Writer.Write("Completed DM load", TraceEventType.Information, LoaderConstant.LogSource, LoaderConstant.SDRLoaderException);
            return true;

        }





















        private bool ValidateRule()
        {
            Log.Write("Validating Rules.", TraceEventType.Information, PRFLoaderConstant.LogSource, PRFLoaderConstant.EventTypeLoaderException);

            bool validationStatus = false;
            try
            {
                //Execute stored procedure 
                using (PRFStg01DBEntities entity = new PRFStg01DBEntities())
                {
                    ((System.Data.Entity.Infrastructure.IObjectContextAdapter)entity).ObjectContext.CommandTimeout = LoaderParms.LoaderSettings.TimeOutMin * 60;

                    SqlParameter auditId = new SqlParameter("@audit_id", LoaderParms.AuditId);
                    SqlParameter fileDate = new SqlParameter("@file_date", LoaderParms.FileDate.ToString("yyyyMMdd"));
                    SqlParameter submitterId = new SqlParameter("@submitterid", LoaderParms.ExchangeCode);
                    SqlParameter fileName = new SqlParameter("@file_name", LoaderParms.FileName);
                    SqlParameter allPass = new SqlParameter
                    { ParameterName = "@all_pass", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Output };
                    SqlParameter valPass = new SqlParameter
                    { ParameterName = "@val_pass", SqlDbType = System.Data.SqlDbType.Bit, Direction = System.Data.ParameterDirection.Output };

                    int returnStatus = entity.Database.ExecuteSqlCommand(System.Data.Entity.TransactionalBehavior.DoNotEnsureTransaction,
                                    "EXEC usp_rule_master @audit_id, @file_date, @submitterid, @file_name,@all_pass output,@val_pass output", auditId, fileDate, submitterId, fileName, allPass, valPass);
                    bool AllSuccess = bool.Parse(allPass.Value.ToString());
                    bool ValSuccess = bool.Parse(valPass.Value.ToString());

                    if (AllSuccess && ValSuccess)
                        validationStatus = true;
                    else if (AllSuccess & !ValSuccess)
                    {
                        validationStatus = true;

                        DataSet validationErrors = GetValidationErrors(LoaderParms.AuditId, LoaderParms.FileName);
                        string messageSubject = string.Format(LoaderParms.LoaderSettings.ErrorEmailSubject, LoaderParms.LoaderSettings.Env);
                        string messageBody = LoaderParms.LoaderSettings.ErrorEmailBody;
                        try
                        {
                            Notify.NotifyCFTCSupportAndReporter(LoaderParms, messageSubject, messageBody, validationErrors);
                        }
                        catch (Exception ex)
                        {
                            string msg = $"Error sending email notification. File - {LoaderParms.FileName}";
                            Log.Write(msg, ex, TraceEventType.Error, PRFLoaderConstant.LogSource, PRFLoaderConstant.EventTypeLoaderException);
                        }
                    }
                    else
                    {
                        DataSet validationErrors = GetValidationErrors(LoaderParms.AuditId, LoaderParms.FileName);
                        string messageSubject = string.Format(LoaderParms.LoaderSettings.ErrorEmailSubject, LoaderParms.LoaderSettings.Env);
                        string messageBody = LoaderParms.LoaderSettings.ErrorEmailBody;
                        try
                        {
                            Notify.NotifyCFTCSupportAndReporter(LoaderParms, messageSubject, messageBody, validationErrors);
                        }
                        catch (Exception ex)
                        {
                            string msg = $"Error sending email notification. File - {LoaderParms.FileName}";
                            Log.Write(msg, ex, TraceEventType.Error, PRFLoaderConstant.LogSource, PRFLoaderConstant.EventTypeLoaderException);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                throw new PRFLoaderException($"Rule validation failed. audit ID -  {LoaderParms.AuditId}, File date - {LoaderParms.FileDate}.", ex);
            }
            return validationStatus;
        }
