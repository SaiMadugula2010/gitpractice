DECLARE @JsonInput NVARCHAR(MAX) = 
'[
    {
        "ColumnName": "option_type", "ExpectedDataType": "TINYINT", "ValidValues": "0,1"
    },
    {
        "ColumnName": "settlement_instr_product_type", "ExpectedDataType": "VARCHAR(20)"
    },
    {
        "ColumnName": "product_type","ExpectedDataType": "VARCHAR(25)","ValidValues": "''FUT'',''OOF'',''OOC'',''CMDTYSWAP'',''MLEG''"
    },
    {
        "ColumnName": "settlement_put_call_indicator", "ExpectedDataType": "TINYINT", "ValidValues": "0,1"
    },
    {
        "ColumnName": "negative_price_eligibility","ExpectedDataType": "VARCHAR(1)"
    },
    {
        "ColumnName": "status","ExpectedDataType": "TINYINT","ValidValues": "1,5,6"
    },
    {
        "ColumnName": "assignment_method","ExpectedDataType": "VARCHAR(1)","ValidValues": "''P'',''R''"
    },
    {
        "ColumnName": "match_algo","ExpectedDataType": "TINYINT","ValidValues": "101,102,103,104,105" 
    },
    {
        "ColumnName": "settlement_method","ExpectedDataType": "VARCHAR(1)","ValidValues": "''C'',''P''"
    },
    {
        "ColumnName": "option_expiration_type","ExpectedDataType": "TINYINT","ValidValues": "0,1,2,99"
    },
    {
        "ColumnName": "list_method","ExpectedDataType": "TINYINT","ValidValues": "0,1" 
    },
    {
        "ColumnName": "flexible_product_eligibility_ind","ExpectedDataType": "VARCHAR(1)","ValidValues": "''Y'',''N''"
    },
    {
        "ColumnName": "flex_indicator","ExpectedDataType": "VARCHAR(1)","ValidValues": "''Y'',''N''"
    },
    {
        "ColumnName": "flow_schedule_type","ExpectedDataType": "TINYINT","ValidValues": "5,6,7,99"
    },
    {
        "ColumnName": "settlement_determination_method","ExpectedDataType": "TINYINT","ValidValues": "1,2,5"
    },
    {
        "ColumnName": "option_payout_type","ExpectedDataType": "TINYINT","ValidValues": "1,2,3,4,5,6,7,8,99"
    },
    {
        "ColumnName": "contrary_instructions_allowed","ExpectedDataType": "VARCHAR(1)","ValidValues": "''Y'',''N''"
    },
    {
        "ColumnName": "currency_inversion","ExpectedDataType": "TINYINT","ValidValues": "20,21"
    },
    {
        "ColumnName": "settlement_calculation_method","ExpectedDataType": "VARCHAR(25)","ValidValues": "''VWAP'',''TWAP'',''MBO'',''LTTD'',''BBID'',''BOFR'',''SPRD'',''OTHR''"
    },
    {
        "ColumnName": "spot_period","ExpectedDataType": "VARCHAR(1)","ValidValues": "''Y'',''N''"
    },
    {
        "ColumnName": "active_month","ExpectedDataType": "VARCHAR(1)","ValidValues": "''Y'',''N''"
    },
    {
        "ColumnName": "uic_type","ExpectedDataType": "TINYINT","ValidValues": "1,2"
    }
]' ;

EXEC ValidateTableColumns 
    @TableName = 'dbo.RuleAudit',
    @ColumnDetails = @JsonInput;


git commands

git init Initialized empty Git 
git config --global user.name "" (configuring git Repo)
git config --global user.email ""
git status                       (checking git repo status)
git add git-commands.txt         (adding changes from working directory into staging area)
git commit -m "practicing git"   (commiting changes to git local repository)
git log                          (traccking changes to local repo)
git show commit id               (to check the changes committed)
git add .                        (addigg all the files to staging area)
git ls-files                     (tracking all the files in local repo)
touch file name                  (creating new file)
ls -ltr                          (listing all the  files)
git remote add origin link       (linking local repo with remote repo)
git remote -v                    (checking the link with remote repo)
git push origin master           (pushing changes from local repo to github)
git branch                       (checking for active branch)
git branch name                  (create new branch)
git checkout branch name         (swithching between branches)
git merge                        (merging changes) note: the branch can be merged from original branch
git log --oneline                (view log in one line)
git rebase                       (command can be used to update the base of the code from one branch to another branch for parallel development)


 

