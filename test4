import numpy as np
import pandas as pd
import pyodbc
import datetime
from openpyxl import Workbook
import smtplib
from email.mime.text import MIMEText

# Database connection string
CONN_STR = "DRIVER={SQL Server Native Client 11.0};SERVER=LPRDDCODM;DATABASE=DCODM01DB;Trusted_Connection=yes;"

# Function to execute stored procedure and return NumPy array
def fetch_data_by_date(rpdate):
    try:
        with pyodbc.connect(CONN_STR) as conn:
            cursor = conn.cursor()
            cursor.execute("EXEC dbo.GetPart39AccountSummaryDataByDate @fromDate = ?, @toDate = ?", (rpdate, rpdate))

            # Fetch results and convert to NumPy array
            columns = [col[0] for col in cursor.description]
            rows = cursor.fetchall()
            if not rows:
                print(f"No data found for {rpdate}")
                return None, None

            data = np.array(rows)
            return data, columns

    except Exception as e:
        print(f"Error fetching data for {rpdate}: {e}")
        return None, None

# Function to get business days of the month
def get_business_days():
    today = datetime.date.today()
    first_day = today.replace(day=1)
    last_month = (first_day - datetime.timedelta(days=1)).replace(day=1)
    business_days = pd.date_range(start=last_month, end=today, freq='B').strftime("%Y-%m-%d").to_numpy()
    return business_days

# Function to process each day's data
def process_days():
    business_days = get_business_days()
    all_data = []

    for date in business_days:
        print(f"Processing data for {date}...")
        data, columns = fetch_data_by_date(date)
        if data is not None:
            all_data.append(data)

    if all_data:
        final_data = np.vstack(all_data)
        return final_data, columns
    return None, None

# Function to calculate top 5 firms using NumPy
def compute_top5(data, col_index):
    unique_dates = np.unique(data[:, 0])  # Assuming first column is 'reportingdate'
    top5_list = []

    for date in unique_dates:
        date_filter = data[:, 0] == date
        segment_data = data[date_filter]
        sorted_indices = np.argsort(segment_data[:, col_index])[::-1]  # Descending sort
        top5_indices = sorted_indices[:5]
        top5_list.append(segment_data[top5_indices])

    return np.vstack(top5_list)

# Function to generate summary report
def generate_report(data):
    unique_dates = np.unique(data[:, 0])  # Assuming first column is 'reportingdate'
    report_summary = []

    for date in unique_dates:
        date_filter = data[:, 0] == date
        daily_data = data[date_filter]

        # Sum relevant columns
        total_futures = np.sum(daily_data[:, 5])  # FO segment
        total_swaps = np.sum(daily_data[:, 6])    # Swaps segment
        total_margin = np.sum(daily_data[:, 7])   # Total margin

        # Get Top 5 for each segment
        top5_fo = compute_top5(daily_data, 5)
        top5_swaps = compute_top5(daily_data, 6)
        top5_total = compute_top5(daily_data, 7)

        # Calculate percentages
        fo_top5_pct = np.sum(top5_fo[:, 5]) / total_futures if total_futures > 0 else 0
        swaps_top5_pct = np.sum(top5_swaps[:, 6]) / total_swaps if total_swaps > 0 else 0
        total_top5_pct = np.sum(top5_total[:, 7]) / total_margin if total_margin > 0 else 0

        # Append summary
        report_summary.append([date, total_futures, total_swaps, total_margin, fo_top5_pct, swaps_top5_pct, total_top5_pct])

    return np.array(report_summary)

# Function to export report to Excel
def save_to_excel(data, columns, filename):
    df = pd.DataFrame(data, columns=columns)
    df.to_excel(filename, index=False)
    print(f"Report saved to {filename}")

# Function to send email notification
def send_email(monthend):
    sender_email = "noreply@cftc.gov"
    recipient_email = "cmarquardt@cftc.gov"
    subject = "***Monthly Cleared Margin Data Updated***"

    body = f"""
    <p>Cleared Margin Data updated for {monthend}.</p>
    <p><a href='\\\\dcprdapsasm02\\CODE_DEV\\CFTC\\DCR\\MonthlyClearedMarginReport'>
    View the report here.</a></p>
    """

    msg = MIMEText(body, "html")
    msg["From"] = sender_email
    msg["To"] = recipient_email
    msg["Subject"] = subject

    with smtplib.SMTP("smtp.cftc.gov") as server:
        server.sendmail(sender_email, recipient_email, msg.as_string())
    print("Email notification sent!")

# Main execution flow
if __name__ == "__main__":
    print("Starting the pipeline...")

    # Fetch and process data
    final_data, columns = process_days()

    if final_data is not None:
        print("Generating report summary...")
        report = generate_report(final_data)

        # Save report
        monthend = datetime.date.today().strftime("%b-%Y")
        output_file = f"CFTC_ClearedMarginReport_{monthend}.xlsx"
        report_columns = ["Date", "Total_Futures", "Total_Swaps", "Total_Margin", "FO_Top5%", "Swaps_Top5%", "Total_Top5%"]
        save_to_excel(report, report_columns, output_file)

        # Send notification
        send_email(monthend)
    else:
        print("No data found for the given period.")
